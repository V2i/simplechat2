package fr.polytech.simplechat1.client;import ocsf.client.*;import fr.polytech.simplechat1.common.*;import java.io.*;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient {  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;     //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI, String id) throws IOException {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    handleMessageFromClientUI("#login " + id);  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg) {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message) {      if(message.startsWith("#")){        // quit cmd        if(message.startsWith("#quit")) {          if (isConnected()) {            try {              System.out.println("CLIENT > Deconnexion du serveur.");              sendToServer("#logoff");              closeConnection();              System.out.println("CLIENT > Vous etes deconnecte.");              System.out.println("CLIENT > Arret du client.");              System.exit(0);            } catch (IOException e) {              e.printStackTrace();            }          } else {            System.out.println("CLIENT > Vous etes deja dectonnecte.");            System.out.println("CLIENT > Arret du client.");            System.exit(0);          }        }        // loggoff cmd        if(message.startsWith("#logoff")) {          if(isConnected()) {            try {              System.out.println("CLIENT > Deconnexion du serveur.");              sendToServer("#logoff");              closeConnection();              System.out.println("CLIENT > Vous etes deconnecte.");            } catch (IOException e) {              e.printStackTrace();            }          } else {            System.out.println("CLIENT > Vous etes deja dectonnecte.");          }        }        // login cmd        if(message.startsWith("#login")) {          if(isConnected()){            System.out.println("CLIENT > Vous etes deja connecte au serveur.");          } else {            try {              System.out.println("CLIENT > Connexion au serveur.");              openConnection();              System.out.println("CLIENT > Vous etes connecte au serveur.");            } catch (IOException e) {              e.printStackTrace();              System.out.println("CLIENT > Impossible de vous connecter.");              quit();            }          }        }        // gethost cmd        if(message.startsWith("#gethost")) {          System.out.println("CLIENT > Host : " + getHost() + ".");        }        // getport cmd        if(message.startsWith("#getport")) {          System.out.println("CLIENT > Port : " + getPort() + ".");        }        // sethost cmd        if(message.startsWith("#sethost")) {          if(isConnected()) {            System.out.println("CLIENT > Vous ne pouvez pas changer l'host tant que vous etes connecte.");          } else {            String [] param = message.split(" ");            System.out.println("CLIENT > Setting host.");            setHost(param[1]);            System.out.println("CLIENT > Host set to " + param[1] + ".");          }        }        // setport cmd        if(message.startsWith("#setport")) {          if(isConnected()) {            System.out.println("CLIENT > Vous ne pouvez pas changer le port tant que vous etes connecte.");          } else {            String [] param = message.split(" ");            System.out.println("CLIENT > Setting port.");            setPort(Integer.parseInt(param[1]));            System.out.println("CLIENT > Port set to " + param[1] + ".");          }        }      } else {        try {          sendToServer(message);        } catch(IOException e) {          clientUI.display("CLIENT > Could not send message to server.  Terminating client.");          quit();        }      }  }    /**   * This method terminates the client.   */  public void quit() {    try {      closeConnection();    } catch(IOException e) {}    System.exit(0);  }  protected void connectionClosed() {    System.err.println("La connexion avec le serveur a été interrompu");  }  protected void connectionException(Exception exception) {    System.err.println("Exception serveur deconnecté");    System.exit(0);  }}//End of ChatClient class